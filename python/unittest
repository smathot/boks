#!/usr/bin/env python

# This file is part of boks.
# 
# boks is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# boks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with boks. If not, see <http://www.gnu.org/licenses/>.

import sys
import serial
import struct

CMD_RESET			= chr(1)
CMD_IDENTIFY 		= chr(2)
CMD_WAIT_PRESS 		= chr(3)
CMD_WAIT_RELEASE 	= chr(4)
CMD_WAIT_SLEEP		= chr(5)
CMD_BUTTON_STATE	= chr(6)
CMD_SET_T1			= chr(7)
CMD_SET_T2			= chr(8)
CMD_SET_TIMEOUT		= chr(9)
CMD_SET_BUTTONS		= chr(10)
CMD_GET_T1			= chr(11)
CMD_GET_T2			= chr(12)
CMD_GET_TD			= chr(13)
CMD_GET_TIME		= chr(14)
CMD_GET_TIMEOUT		= chr(15)
CMD_GET_BUTTONS		= chr(16)

if len(sys.argv) < 2:
	print 'Usage: bokstest [port]'
	sys.exit(1)
	
port = sys.argv[1]
s = serial.Serial(port, baudrate=115200, timeout=1)
print 'Connected to Arduino'
print 'Waiting for handshake ...'

while True:
	s.write(CMD_IDENTIFY)	
	v = s.read(5)
	if v == '':
		continue
	print 'Arduino says:', v
	v = s.read(16)
	print 'Arduino says:', v
	break
	
print 'Getting active buttons:'
s.write(CMD_GET_BUTTONS)
v = s.read(1)
print 'Arduino says:', bin(ord(v))	
	
print 'Disabling all but button 2'
s.write(CMD_SET_BUTTONS)
print s.write(chr(2))

print 'Getting active buttons:'
for i in range(1):
	s.write(CMD_GET_BUTTONS)
	v = s.read(1)
	print 'Arduino says:', bin(ord(v))

print 'Setting 2000ms timeout'
s.write(CMD_SET_TIMEOUT)
t = struct.pack('I', 2000*1000)
s.write(t)

print 'Getting timeout'
s.write(CMD_GET_TIMEOUT)
v = s.read(4)
if v != '':
	t = struct.unpack('I', v)[0] / 1000			
	print 'Arduino says:', t	
print 'Setting T1'
s.write(CMD_SET_T1)

print 'Waiting for button press ...'
s.write(CMD_WAIT_PRESS)
while True:
	v = s.read(1)
	if v != '':
		print 'Arduino says:', ord(v)
		break
		
print 'Getting timestamp for button press ...'
s.write(CMD_GET_T2)
v = s.read(4)
if v != '':
	t = struct.unpack('I', v)[0] / 1000			
	print 'Arduino says:', t
	
print 'Getting TD for button press ...'
s.write(CMD_GET_TD)
v = s.read(4)
if v != '':
	t = struct.unpack('I', v)[0] / 1000			
	print 'Arduino says:', t
	
print 'Getting button state'
s.write(CMD_BUTTON_STATE)
v = s.read(1)
print 'Arduino says:', bin(ord(v))
	
print 'Setting T1'
s.write(CMD_SET_T1)
	
print 'Waiting for button release ...'
s.write(CMD_WAIT_RELEASE)
while True:
	v = s.read(1)
	if v != '':
		print 'Arduino says:', ord(v)
		break
		
print 'Getting timestamp for button release ...'
s.write(CMD_GET_T2)
v = s.read(4)
if v != '':
	t = struct.unpack('I', v)[0] / 1000			
	print 'Arduino says:', t

